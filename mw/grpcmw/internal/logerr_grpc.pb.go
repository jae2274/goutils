// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: mw/grpcmw/internal/logerr.proto

package internal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogErrServiceClient is the client API for LogErrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogErrServiceClient interface {
	Error(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ErrorStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (LogErrService_ErrorStreamClient, error)
}

type logErrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogErrServiceClient(cc grpc.ClientConnInterface) LogErrServiceClient {
	return &logErrServiceClient{cc}
}

func (c *logErrServiceClient) Error(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mw.grpcmw.internal.LogErrService/Error", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logErrServiceClient) ErrorStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (LogErrService_ErrorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &LogErrService_ServiceDesc.Streams[0], "/mw.grpcmw.internal.LogErrService/ErrorStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logErrServiceErrorStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogErrService_ErrorStreamClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type logErrServiceErrorStreamClient struct {
	grpc.ClientStream
}

func (x *logErrServiceErrorStreamClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogErrServiceServer is the server API for LogErrService service.
// All implementations must embed UnimplementedLogErrServiceServer
// for forward compatibility
type LogErrServiceServer interface {
	Error(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ErrorStream(*emptypb.Empty, LogErrService_ErrorStreamServer) error
	mustEmbedUnimplementedLogErrServiceServer()
}

// UnimplementedLogErrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLogErrServiceServer struct {
}

func (UnimplementedLogErrServiceServer) Error(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedLogErrServiceServer) ErrorStream(*emptypb.Empty, LogErrService_ErrorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ErrorStream not implemented")
}
func (UnimplementedLogErrServiceServer) mustEmbedUnimplementedLogErrServiceServer() {}

// UnsafeLogErrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogErrServiceServer will
// result in compilation errors.
type UnsafeLogErrServiceServer interface {
	mustEmbedUnimplementedLogErrServiceServer()
}

func RegisterLogErrServiceServer(s grpc.ServiceRegistrar, srv LogErrServiceServer) {
	s.RegisterService(&LogErrService_ServiceDesc, srv)
}

func _LogErrService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogErrServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mw.grpcmw.internal.LogErrService/Error",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogErrServiceServer).Error(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogErrService_ErrorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogErrServiceServer).ErrorStream(m, &logErrServiceErrorStreamServer{stream})
}

type LogErrService_ErrorStreamServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type logErrServiceErrorStreamServer struct {
	grpc.ServerStream
}

func (x *logErrServiceErrorStreamServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// LogErrService_ServiceDesc is the grpc.ServiceDesc for LogErrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogErrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mw.grpcmw.internal.LogErrService",
	HandlerType: (*LogErrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Error",
			Handler:    _LogErrService_Error_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ErrorStream",
			Handler:       _LogErrService_ErrorStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mw/grpcmw/internal/logerr.proto",
}
